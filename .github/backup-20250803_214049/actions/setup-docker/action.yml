name: 'Setup Docker Environment'
description: 'Sets up Docker Buildx with registry health checks, connection resilience, and comprehensive error recovery'

inputs:
  registry-host:
    description: 'Docker registry host'
    required: false
    default: 'localhost:5100'
  setup-buildx:
    description: 'Whether to setup Docker Buildx'
    required: false
    default: 'true'
  cache-enabled:
    description: 'Whether to enable build cache'
    required: false
    default: 'true'
  health-check-timeout:
    description: 'Registry health check timeout in seconds'
    required: false
    default: '60'
  max-retries:
    description: 'Maximum number of retry attempts for registry operations'
    required: false
    default: '5'
  enable-fallback-registry:
    description: 'Enable fallback to alternative registries'
    required: false
    default: 'false'
  skip-registry-check:
    description: 'Skip registry health check (for offline builds)'
    required: false
    default: 'false'

outputs:
  registry-host:
    description: 'Registry host that was configured'
    value: ${{ steps.registry-setup.outputs.final-registry-host }}
  registry-health:
    description: 'Registry health status'
    value: ${{ steps.registry-health.outputs.health-status }}
  buildx-setup:
    description: 'Whether Docker Buildx was successfully set up'
    value: ${{ steps.buildx-setup.outputs.success }}
  fallback-used:
    description: 'Whether fallback mechanisms were used'
    value: ${{ steps.registry-setup.outputs.fallback-used }}
  retry-count:
    description: 'Number of retries used during setup'
    value: ${{ steps.registry-setup.outputs.retry-count }}

runs:
  using: 'composite'
  steps:
    - name: Setup reliability framework
      shell: bash
      run: |
        # Source reliability script or create minimal fallback
        if [[ -f "${{ github.workspace }}/.github/scripts/ci-reliability.sh" ]]; then
          source "${{ github.workspace }}/.github/scripts/ci-reliability.sh"
        else
          log_info() { echo "ℹ️  $1"; }
          log_warn() { echo "⚠️  $1" >&2; }
          log_error() { echo "❌ $1" >&2; }
          log_debug() { echo "🔍 $1"; }
          retry_with_backoff() {
            local max_attempts="$1"
            shift
            local attempt=1
            while [[ $attempt -le $max_attempts ]]; do
              if "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 2)) seconds..."
              sleep $((attempt * 2))
              ((attempt++))
            done
            return 1
          }
        fi
        
        echo "🐳 Initializing Docker environment setup with enhanced reliability"

    - name: Setup Docker Buildx with retry
      id: buildx-setup
      if: ${{ inputs.setup-buildx == 'true' }}
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "🔧 Setting up Docker Buildx with retry mechanism"
        
        # Initialize outputs
        echo "success=false" >> $GITHUB_OUTPUT
        
        # Function to setup buildx
        setup_buildx() {
          echo "Attempting Docker Buildx setup..."
          
          # Check if docker is available
          if ! command -v docker >/dev/null 2>&1; then
            log_error "Docker is not available"
            return 1
          fi
          
          # Check if docker daemon is running
          if ! docker info >/dev/null 2>&1; then
            log_error "Docker daemon is not running"
            return 1
          fi
          
          # Setup buildx with enhanced configuration
          docker buildx create --name multiarch --use --driver docker-container \
            --driver-opt network=host \
            --buildkitd-flags '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host' \
            2>/dev/null || {
            
            # Fallback: try simpler buildx setup
            log_warn "Advanced buildx setup failed, trying simpler configuration"
            docker buildx create --name simple --use --driver docker-container 2>/dev/null || {
              
              # Final fallback: use default builder
              log_warn "Custom buildx setup failed, using default builder"
              docker buildx use default 2>/dev/null || return 1
            }
          }
          
          # Verify buildx is working
          if docker buildx inspect --bootstrap >/dev/null 2>&1; then
            log_info "Docker Buildx setup completed successfully"
            return 0
          else
            log_error "Docker Buildx verification failed"
            return 1
          fi
        }
        
        # Retry buildx setup
        if retry_with_backoff 3 setup_buildx; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Docker Buildx setup completed"
        else
          log_error "Docker Buildx setup failed after retries"
          if [[ "${{ inputs.setup-buildx }}" == "true" ]]; then
            exit 1
          fi
        fi

    - name: Docker registry setup and health check
      id: registry-setup
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "🏥 Setting up Docker registry with health checks and resilience"
        
        # Initialize outputs
        echo "final-registry-host=${{ inputs.registry-host }}" >> $GITHUB_OUTPUT
        echo "fallback-used=false" >> $GITHUB_OUTPUT
        echo "retry-count=0" >> $GITHUB_OUTPUT
        
        registry_host="${{ inputs.registry-host }}"
        retry_count=0
        fallback_used=false
        
        # Function to test registry connectivity
        test_registry_health() {
          local host="$1"
          local timeout="${{ inputs.health-check-timeout }}"
          
          log_info "Testing registry health: $host"
          
          # Handle different registry URL formats
          local health_url
          if [[ "$host" == "localhost"* ]] || [[ "$host" == "127.0.0.1"* ]]; then
            health_url="http://$host/v2/"
          else
            health_url="https://$host/v2/"
          fi
          
          # Test connectivity with timeout
          if timeout "$timeout" curl -sf "$health_url" >/dev/null 2>&1; then
            log_info "Registry health check passed: $host"
            return 0
          else
            log_warn "Registry health check failed: $host"
            return 1
          fi
        }
        
        # Function to wait for local registry startup
        wait_for_local_registry() {
          local host="$1"
          local max_wait="${{ inputs.health-check-timeout }}"
          local check_interval=2
          
          log_info "Waiting for local registry to start: $host"
          
          local elapsed=0
          while [[ $elapsed -lt $max_wait ]]; do
            if test_registry_health "$host"; then
              return 0
            fi
            
            sleep $check_interval
            elapsed=$((elapsed + check_interval))
            
            if [[ $((elapsed % 10)) -eq 0 ]]; then
              log_info "Still waiting for registry... (${elapsed}s elapsed)"
            fi
          done
          
          log_error "Registry did not become healthy within ${max_wait} seconds"
          return 1
        }
        
        # Skip registry check if requested
        if [[ "${{ inputs.skip-registry-check }}" == "true" ]]; then
          log_info "Skipping registry health check as requested"
          echo "REGISTRY_HOST=$registry_host" >> $GITHUB_ENV
          exit 0
        fi
        
        # Primary registry health check with retries
        log_info "Performing primary registry health check: $registry_host"
        
        for attempt in $(seq 1 ${{ inputs.max-retries }}); do
          retry_count=$((retry_count + 1))
          
          if [[ "$registry_host" == "localhost"* ]]; then
            # For localhost registries, wait for startup
            if wait_for_local_registry "$registry_host"; then
              break
            fi
          else
            # For remote registries, direct health check
            if test_registry_health "$registry_host"; then
              break
            fi
          fi
          
          if [[ $attempt -lt ${{ inputs.max-retries }} ]]; then
            log_warn "Registry health check failed (attempt $attempt/${{ inputs.max-retries }}), retrying in $((attempt * 3)) seconds..."
            sleep $((attempt * 3))
          else
            log_error "Registry health check failed after ${{ inputs.max-retries }} attempts"
            
            # Try fallback options if enabled
            if [[ "${{ inputs.enable-fallback-registry }}" == "true" ]]; then
              log_info "Attempting fallback registry options"
              fallback_used=true
              
              # Try common fallback registries
              fallback_registries=("localhost:5000" "127.0.0.1:5000" "registry:5000")
              
              for fallback_host in "${fallback_registries[@]}"; do
                if [[ "$fallback_host" != "${{ inputs.registry-host }}" ]]; then
                  log_info "Trying fallback registry: $fallback_host"
                  
                  if test_registry_health "$fallback_host"; then
                    registry_host="$fallback_host"
                    log_info "Fallback registry is healthy: $fallback_host"
                    break
                  fi
                fi
              done
              
              # If still no healthy registry, continue without registry for offline builds
              if ! test_registry_health "$registry_host"; then
                log_warn "No healthy registry found, continuing with offline build mode"
                registry_host="offline"
              fi
            else
              log_error "Registry health check failed and fallback is disabled"
              exit 1
            fi
          fi
        done
        
        # Set final registry host
        if [[ "$registry_host" != "offline" ]]; then
          echo "REGISTRY_HOST=$registry_host" >> $GITHUB_ENV
          log_info "Registry configured successfully: $registry_host"
        else
          echo "REGISTRY_HOST=" >> $GITHUB_ENV
          log_warn "No registry configured - offline build mode"
        fi
        
        # Update outputs
        echo "final-registry-host=$registry_host" >> $GITHUB_OUTPUT
        echo "fallback-used=$fallback_used" >> $GITHUB_OUTPUT
        echo "retry-count=$retry_count" >> $GITHUB_OUTPUT

    - name: Registry health status check
      id: registry-health
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "🩺 Performing final registry health assessment"
        
        registry_host="${{ steps.registry-setup.outputs.final-registry-host }}"
        
        if [[ "${{ inputs.skip-registry-check }}" == "true" ]]; then
          echo "health-status=skipped" >> $GITHUB_OUTPUT
          log_info "Registry health check was skipped"
        elif [[ "$registry_host" == "offline" ]] || [[ -z "$registry_host" ]]; then
          echo "health-status=offline" >> $GITHUB_OUTPUT
          log_warn "Registry is in offline mode"
        else
          # Perform final health verification
          health_url="http://$registry_host/v2/"
          if [[ ! "$registry_host" == "localhost"* ]] && [[ ! "$registry_host" == "127.0.0.1"* ]]; then
            health_url="https://$registry_host/v2/"
          fi
          
          if timeout 30 curl -sf "$health_url" >/dev/null 2>&1; then
            echo "health-status=healthy" >> $GITHUB_OUTPUT
            log_info "Final registry health check: HEALTHY"
          else
            echo "health-status=unhealthy" >> $GITHUB_OUTPUT
            log_warn "Final registry health check: UNHEALTHY"
          fi
        fi

    - name: Configure build cache and optimization
      if: ${{ inputs.cache-enabled == 'true' }}
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "🚀 Configuring Docker build cache and optimizations"
        
        # Enable Docker BuildKit
        echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
        echo "BUILDX_NO_DEFAULT_ATTESTATIONS=1" >> $GITHUB_ENV
        
        # Configure build cache settings
        echo "BUILDX_METADATA_PROVENANCE=false" >> $GITHUB_ENV
        echo "BUILDX_METADATA_WARNINGS=false" >> $GITHUB_ENV
        
        # Performance optimizations
        echo "DOCKER_CLI_EXPERIMENTAL=enabled" >> $GITHUB_ENV
        echo "BUILDKIT_PROGRESS=plain" >> $GITHUB_ENV
        
        # Configure build timeout
        echo "BUILDKIT_STEP_LOG_MAX_SIZE=10485760" >> $GITHUB_ENV  # 10MB
        echo "BUILDKIT_STEP_LOG_MAX_SPEED=1048576" >> $GITHUB_ENV  # 1MB/s
        
        log_info "Docker build cache and optimizations configured"

    - name: Docker environment verification
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "🔍 Verifying Docker environment setup"
        
        # Check Docker installation
        if ! docker --version; then
          log_error "Docker is not properly installed"
          exit 1
        fi
        
        # Check Docker daemon
        if ! docker info >/dev/null 2>&1; then
          log_error "Docker daemon is not accessible"
          exit 1
        fi
        
        # Check Buildx if enabled
        if [[ "${{ inputs.setup-buildx }}" == "true" ]]; then
          if docker buildx version >/dev/null 2>&1; then
            log_info "Docker Buildx is available"
            
            # Show current builder
            current_builder=$(docker buildx inspect --bootstrap 2>/dev/null | head -1 || echo "default")
            log_info "Current builder: $current_builder"
          else
            log_warn "Docker Buildx is not available"
          fi
        fi
        
        # Show registry configuration
        registry_host="${{ steps.registry-setup.outputs.final-registry-host }}"
        registry_health="${{ steps.registry-health.outputs.health-status }}"
        
        log_info "Registry configuration:"
        log_info "  Host: ${registry_host:-"none"}"
        log_info "  Health: $registry_health"
        log_info "  Fallback used: ${{ steps.registry-setup.outputs.fallback-used }}"
        log_info "  Retries: ${{ steps.registry-setup.outputs.retry-count }}"
        
        # Test basic Docker functionality
        if echo "FROM alpine:latest" | docker build -q -t test-image - >/dev/null 2>&1; then
          docker rmi test-image >/dev/null 2>&1 || true
          log_info "Docker build functionality verified"
        else
          log_error "Docker build functionality test failed"
          exit 1
        fi
        
        echo "✅ Docker environment verification completed"

    - name: Generate Docker setup summary
      if: always()
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh" 2>/dev/null || true
        
        echo "📋 Generating Docker setup summary"
        
        # Generate GitHub step summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## Docker Environment Setup Report
        
        **Registry Host**: ${{ steps.registry-setup.outputs.final-registry-host }}
        **Registry Health**: ${{ steps.registry-health.outputs.health-status }}
        **Buildx Setup**: ${{ steps.buildx-setup.outputs.success }}
        **Cache Enabled**: ${{ inputs.cache-enabled }}
        
        ### Configuration
        | Setting | Value |
        |---------|-------|
        | Registry Host | ${{ inputs.registry-host }} |
        | Final Registry | ${{ steps.registry-setup.outputs.final-registry-host }} |
        | Setup Buildx | ${{ inputs.setup-buildx }} |
        | Cache Enabled | ${{ inputs.cache-enabled }} |
        | Health Check Timeout | ${{ inputs.health-check-timeout }}s |
        | Max Retries | ${{ inputs.max-retries }} |
        | Fallback Registry | ${{ inputs.enable-fallback-registry }} |
        | Skip Registry Check | ${{ inputs.skip-registry-check }} |
        
        ### Results
        | Metric | Value |
        |--------|-------|
        | Registry Health | ${{ steps.registry-health.outputs.health-status }} |
        | Buildx Success | ${{ steps.buildx-setup.outputs.success }} |
        | Fallback Used | ${{ steps.registry-setup.outputs.fallback-used }} |
        | Retry Count | ${{ steps.registry-setup.outputs.retry-count }} |
        
        EOF
        
        # Add warning if fallback was used
        if [[ "${{ steps.registry-setup.outputs.fallback-used }}" == "true" ]]; then
          cat >> $GITHUB_STEP_SUMMARY << EOF
        ### ⚠️ Fallback Mechanisms Used
        
        The primary registry configuration failed and fallback mechanisms were activated.
        This may indicate network issues or registry unavailability.
        
        EOF
        fi
        
        log_info "Docker setup summary generated"