name: 'Setup Go Environment'
description: 'Sets up Go with caching,retry mechanisms, and comprehensive error recovery'

inputs:
  go-version:
    description: 'Go version to setup'
    required: false
    default: '1.23.4'
  cache-key-suffix:
    description: 'Additional suffix for cache key'
    required: false
    default: ''
  max-retries:
    description: 'Maximum number of retries for network operations'
    required: false
    default: '5'
  enable-fallback-proxy:
    description: 'Enable fallback to alternative Go proxies'
    required: false
    default: 'true'
  skip-verification:
    description: 'Skip go mod verification on failure (fallback mode)'
    required: false
    default: 'false'
  enable-build-cache:
    description: 'Enable enhanced build cache optimization'
    required: false
    default: 'true'
  parallelism:
    description: 'Number of parallel build processes'
    required: false
    default: '2'

outputs:
  modules-cache-hit:
    description: 'Whether modules cache was hit'
    value: ${{ steps.cache-modules.outputs.cache-hit }}
  build-cache-hit:
    description: 'Whether build cache was hit'
    value: ${{ steps.cache-build.outputs.cache-hit }}
  go-version:
    description: 'Go version that was set up'
    value: ${{ steps.setup-go.outputs.go-version }}
  proxy-used:
    description: 'Which Go proxy was successfully used'
    value: ${{ steps.setup-proxy.outputs.proxy-used }}
  download-success:
    description: 'Whether module download was successful'
    value: ${{ steps.download-deps.outputs.success }}
  fallback-used:
    description: 'Whether fallback mechanisms were activated'
    value: ${{ steps.download-deps.outputs.fallback-used }}

runs:
  using: 'composite'
  steps:
    - name: Setup reliability scripts
      shell: bash
      run: |
        # Ensure reliability script is available and executable
        if [[ ! -f "${{ github.workspace }}/.github/scripts/ci-reliability.sh" ]]; then
          echo "‚ö†Ô∏è CI reliability script not found, using fallback mechanisms"
          # Create minimal fallback functions
          mkdir -p "${{ github.workspace }}/.github/scripts"
          cat > "${{ github.workspace }}/.github/scripts/ci-reliability.sh" << 'EOF'
        #!/bin/bash
        retry_with_backoff() {
          local max_attempts="$1"
          shift
          local attempt=1
          while [[ $attempt -le $max_attempts ]]; do
            if "$@"; then
              return 0
            fi
            echo "Attempt $attempt failed, retrying in $((attempt * 2)) seconds..."
            sleep $((attempt * 2))
            ((attempt++))
          done
          return 1
        }
        log_info() { echo "‚ÑπÔ∏è  $1"; }
        log_warn() { echo "‚ö†Ô∏è  $1" >&2; }
        log_error() { echo "‚ùå $1" >&2; }
        log_debug() { echo "üîç $1"; }
        EOF
          chmod +x "${{ github.workspace }}/.github/scripts/ci-reliability.sh"
        fi

    - name: Set up Go with retry
      id: setup-go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: true
        cache: false  # We handle caching separately

    - name: Setup Go environment and proxy configuration
      id: setup-proxy
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh"
        
        echo "üîß Configuring Go environment with resilient proxy settings"
        
        # Base Go environment
        echo "GO111MODULE=on" >> $GITHUB_ENV
        echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
        echo "GOPATH=" >> $GITHUB_ENV
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        
        # Enhanced proxy configuration with fallbacks
        if [[ "${{ inputs.enable-fallback-proxy }}" == "true" ]]; then
          # Multiple proxy sources for resilience
          proxy_list="https://proxy.golang.org,https://goproxy.cn,https://goproxy.io,https://mirrors.aliyun.com/goproxy,direct"
          echo "GOPROXY=${proxy_list}" >> $GITHUB_ENV
          echo "proxy-used=${proxy_list}" >> $GITHUB_OUTPUT
          log_info "Configured Go proxy with fallbacks: ${proxy_list}"
        else
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV
          echo "proxy-used=https://proxy.golang.org,direct" >> $GITHUB_OUTPUT
        fi
        
        # Checksum database configuration
        echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
        echo "GOPRIVATE=" >> $GITHUB_ENV
        
        # Performance optimizations
        echo "GOCACHE=${HOME}/.cache/go-build" >> $GITHUB_ENV
        echo "GOMODCACHE=${HOME}/go/pkg/mod" >> $GITHUB_ENV
        
        # Timeout configurations
        echo "GOTOOLCHAIN=local" >> $GITHUB_ENV
        
        echo "‚úÖ Go environment configured with enhanced resilience"

    - name: Cache Go modules with enhanced fallback
      id: cache-modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mod-${{ inputs.go-version }}-
          ${{ runner.os }}-go-mod-
      continue-on-error: true
    
    - name: Cache Go build cache with enhanced fallback
      id: cache-build
      uses: actions/cache@v4
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ inputs.go-version }}-${{ hashFiles('**/*.go') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          ${{ runner.os }}-go-build-${{ inputs.go-version }}-${{ inputs.cache-key-suffix }}
          ${{ runner.os }}-go-build-${{ inputs.go-version }}-
          ${{ runner.os }}-go-build-
      continue-on-error: true
    
    - name: Create cache directories if missing
      shell: bash
      run: |
        echo "üîß Ensuring cache directories exist"
        mkdir -p ~/.cache/go-build
        mkdir -p ~/go/pkg/mod
        
        # Set proper permissions
        chmod 755 ~/.cache/go-build
        chmod 755 ~/go/pkg/mod
        
        echo "‚úÖ Cache directories prepared"

    - name: Download dependencies with enhanced retry and fallback
      id: download-deps
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh"
        
        echo "üì¶ Downloading Go dependencies with enhanced reliability"
        
        # Initialize outputs
        echo "success=false" >> $GITHUB_OUTPUT
        echo "fallback-used=false" >> $GITHUB_OUTPUT
        
        # Function to attempt dependency download
        download_dependencies() {
          local attempt_type="$1"
          log_info "Attempting dependency download: $attempt_type"
          
          # Clean module cache if this is a retry
          if [[ "$attempt_type" != "primary" ]]; then
            log_warn "Cleaning module cache for retry attempt"
            go clean -modcache 2>/dev/null || true
          fi
          
          # Download with timeout and retries
          if timeout 300 go mod download -x; then
            log_info "Module download successful: $attempt_type"
            
            # Verify checksums unless skip verification is enabled
            if [[ "${{ inputs.skip-verification }}" != "true" ]]; then
              if timeout 120 go mod verify; then
                log_info "Module verification successful: $attempt_type"
                return 0
              else
                log_warn "Module verification failed: $attempt_type"
                # Continue without verification in fallback mode
                if [[ "$attempt_type" != "primary" ]]; then
                  log_warn "Continuing without verification in fallback mode"
                  return 0
                fi
                return 1
              fi
            else
              log_info "Skipping module verification as requested"
              return 0
            fi
          else
            log_error "Module download failed: $attempt_type"
            return 1
          fi
        }
        
        # Primary attempt with configured proxy
        if download_dependencies "primary"; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Dependencies downloaded successfully on primary attempt"
          exit 0
        fi
        
        log_warn "Primary download attempt failed, trying fallback mechanisms"
        echo "fallback-used=true" >> $GITHUB_OUTPUT
        
        # Fallback 1: Try with different proxy configuration
        log_info "Fallback 1: Trying with direct proxy bypass"
        export GOPROXY="direct"
        if download_dependencies "direct-proxy"; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Dependencies downloaded successfully using direct proxy"
          exit 0
        fi
        
        # Fallback 2: Try with no proxy
        log_info "Fallback 2: Trying with no proxy (GOPROXY=off)"
        export GOPROXY="off"
        export GOSUMDB="off"
        if download_dependencies "no-proxy"; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Dependencies downloaded successfully with no proxy"
          exit 0
        fi
        
        # Final fallback: Continue without full dependency resolution
        log_error "All download attempts failed, continuing with partial setup"
        log_warn "Pipeline will continue but some operations may fail"
        
        # At least ensure go.mod exists and is readable
        if [[ -f "go.mod" ]] && go mod tidy 2>/dev/null; then
          echo "success=partial" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Partial dependency setup completed"
          exit 0
        fi
        
        echo "‚ùå Complete dependency download failure"
        exit 1

    - name: Verify Go installation and dependencies
      shell: bash
      run: |
        source "${{ github.workspace }}/.github/scripts/ci-reliability.sh"
        
        echo "üîç Verifying Go installation and dependencies"
        
        # Check Go installation
        if ! go version; then
          log_error "Go is not properly installed"
          exit 1
        fi
        
        # Check if we can build anything
        if ! timeout 60 go list ./... >/dev/null 2>&1; then
          log_warn "Cannot list packages, but continuing"
        fi
        
        # Display Go environment for debugging
        echo "üìã Go environment information:"
        go env GOOS GOARCH GOVERSION GOPROXY GOSUMDB || true
        
        # Check module status
        if [[ -f "go.mod" ]]; then
          echo "üì¶ Module information:"
          head -5 go.mod || true
        fi
        
        echo "‚úÖ Go setup verification completed"

    - name: Setup error recovery context
      if: failure()
      shell: bash
      run: |
        echo "üö® Go setup encountered failures, setting up recovery context"
        
        # Create a summary of what failed
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## Go Setup Error Recovery Report
        
        **Status**: Setup encountered issues but attempting to continue
        **Go Version**: ${{ inputs.go-version }}
        **Cache Hit**: ${{ steps.cache.outputs.cache-hit }}
        **Download Success**: ${{ steps.download-deps.outputs.success }}
        **Fallback Used**: ${{ steps.download-deps.outputs.fallback-used }}
        
        ### Recovery Actions Taken
        - Attempted multiple proxy configurations
        - Used individual module downloads
        - Configured partial dependency resolution
        
        ### Next Steps
        - Pipeline will continue with available dependencies
        - Some operations may have degraded functionality
        - Monitor subsequent steps for related failures
        EOF
        
        # Set environment variables for downstream steps
        echo "GO_SETUP_DEGRADED=true" >> $GITHUB_ENV
        echo "GO_SETUP_ERROR_RECOVERY=active" >> $GITHUB_ENV