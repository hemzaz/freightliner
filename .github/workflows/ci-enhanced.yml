name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v2.3.0'
  REGISTRY_HOST: 'localhost:5100'

jobs:
  # Fast feedback job - runs immediately on every push/PR
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Code formatting check
        run: |
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "❌ Code formatting issues found:"
            echo "$gofmt_output"
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: Go vet
        run: go vet ./...

      - name: Build verification
        run: |
          echo "Building all packages..."
          go build ./...
          echo "Building main application..."
          go build -o bin/freightliner main.go

  # Unit tests with improved reliability
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    
    strategy:
      matrix:
        go-version: ['1.24.5']
        test-group: [
          'unit-core',      # Core unit tests (helper, metrics, network, etc.)
          'unit-clients',   # Client tests with mocks
          'unit-services'   # Service layer tests
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Build test manifest tool
        run: |
          mkdir -p bin
          go build -o bin/test-manifest ./cmd/test-manifest

      - name: Run unit tests (core)
        if: matrix.test-group == 'unit-core'
        run: |
          echo "=== Running core unit tests ==="
          ./scripts/test-with-manifest.sh --env ci --categories unit \
            freightliner/pkg/helper/... \
            freightliner/pkg/metrics \
            freightliner/pkg/network \
            freightliner/pkg/copy
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Run unit tests (clients)
        if: matrix.test-group == 'unit-clients'
        run: |
          echo "=== Running client unit tests with mocks ==="
          ./scripts/test-with-manifest.sh --env ci --categories unit \
            freightliner/pkg/client/common \
            freightliner/pkg/client/ecr \
            freightliner/pkg/client/gcr
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Run unit tests (services)
        if: matrix.test-group == 'unit-services'
        run: |
          echo "=== Running service unit tests ==="
          ./scripts/test-with-manifest.sh --env ci --categories unit \
            freightliner/pkg/tree \
            freightliner/pkg/service \
            freightliner/pkg/replication
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.test-group }}-${{ matrix.go-version }}
          path: |
            coverage.out
            test-results.xml
          retention-days: 7

  # Linting with caching and parallelization
  lint:
    name: Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ env.GOLANGCI_LINT_VERSION }}
          restore-keys: ${{ runner.os }}-golangci-lint-

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Run linting
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run --timeout=10m --verbose

  # Integration tests with proper service setup
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, lint]
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Wait for registry to be ready
        run: |
          echo "Waiting for registry to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:5100/v2/ > /dev/null 2>&1; then
              echo "Registry is ready!"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done

      - name: Build test manifest tool
        run: |
          mkdir -p bin
          go build -o bin/test-manifest ./cmd/test-manifest

      - name: Run integration tests
        run: |
          echo "=== Running integration tests ==="
          ./scripts/test-with-manifest.sh --env integration --categories integration
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration
          RUN_INTEGRATION_TESTS: true

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            coverage.out
            test-results.xml
            integration-logs/
          retention-days: 7

  # Load tests (only on schedule or manual trigger)
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [unit-tests, lint]
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build application
        run: go build -o bin/freightliner main.go

      - name: Run load tests
        run: |
          echo "=== Running load tests ==="
          # Run load tests with metrics collection
          go test -v -run TestLoad -timeout=30m ./pkg/replication/...
          go test -v -run TestBenchmark -timeout=30m ./pkg/network/...
        env:
          REGISTRY_HOST: localhost:5100
          LOAD_TEST_DURATION: 15m
          LOAD_TEST_CONCURRENT_JOBS: 50

      - name: Upload load test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load-test-*.json
            performance-*.log
          retention-days: 14

  # Docker build and test
  docker-tests:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly

      - name: Build production images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: production
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Run Nancy vulnerability check
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [unit-tests, lint, integration-tests, docker-tests, security-scan]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.docker-tests.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  Unit tests: ${{ needs.unit-tests.result }}"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Integration tests: ${{ needs.integration-tests.result }}"
            echo "  Docker tests: ${{ needs.docker-tests.result }}"
            echo "  Security scan: ${{ needs.security-scan.result }}"
            exit 1
          fi

      - name: Report test coverage
        if: needs.unit-tests.result == 'success'
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Unit tests completed successfully with coverage metrics." >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are available in the artifacts." >> $GITHUB_STEP_SUMMARY