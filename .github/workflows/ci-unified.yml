name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v2.3.0'

jobs:
  # Core CI pipeline - always runs
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Setup environment
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install tools
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Code formatting check
        run: |
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "❌ Code formatting issues found:"
            echo "$gofmt_output"
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: Linting
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run --timeout=5m

      - name: Build verification
        run: |
          echo "Building all packages..."
          go build ./...
          echo "Building main application..."
          go build -o bin/freightliner main.go

      - name: Test execution
        run: |
          echo "=== Running CI-optimized tests with manifest ==="
          make test-ci
        env:
          REGISTRY_HOST: localhost:5100
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            bin/
            coverage.out
          retention-days: 7

  # Docker build verification
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      - name: Build and test with Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly
          build-args: REGISTRY_HOST=localhost:5100

      - name: Build production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: production
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly