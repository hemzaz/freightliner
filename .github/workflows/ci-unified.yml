name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v2.3.0'

jobs:
  # Fast validation and basic checks
  validate:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      should_run_enhanced: ${{ steps.check-enhanced.outputs.should_run }}
      should_run_integration: ${{ steps.check-integration.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Setup environment
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify module integrity
        run: go mod verify

      - name: Check enhanced testing trigger
        id: check-enhanced
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ contains(github.event.pull_request.labels.*.name, 'run-enhanced-tests') }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Check integration testing trigger
        id: check-integration
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ contains(github.event.pull_request.labels.*.name, 'run-integration-tests') }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  # Primary CI pipeline - fast feedback
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest
    needs: validate
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Setup environment
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install tools
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Code formatting check
        run: |
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "❌ Code formatting issues found:"
            echo "$gofmt_output"
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: Linting
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run --timeout=5m

      - name: Build verification
        run: |
          echo "Building all packages..."
          go build ./...
          echo "Building main application..."
          go build -o bin/freightliner main.go

      - name: Test execution
        run: |
          echo "=== Running CI-optimized tests with manifest ==="
          make test-ci
        env:
          REGISTRY_HOST: localhost:5100
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            bin/
            coverage.out
          retention-days: 7

  # Docker build verification
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: validate
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      - name: Build and test with Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly
          build-args: REGISTRY_HOST=localhost:5100

      - name: Build production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.buildx
          target: production
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly

  # Enhanced testing - runs on master or with label
  enhanced-testing:
    name: Enhanced Testing
    runs-on: ubuntu-latest
    needs: [validate, ci]
    if: needs.validate.outputs.should_run_enhanced == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Unit Tests (CI)"
            categories: "unit"
            environment: "ci"
            needs_registry: false
          - name: "Unit Tests (Local)"
            categories: "unit"
            environment: "local"
            needs_registry: false
          - name: "Timing Sensitive Tests"
            categories: "timing_sensitive"
            environment: "local"
            needs_registry: true
          - name: "Critical Package Tests"
            categories: "unit"
            environment: "ci"
            package: "freightliner/pkg/replication"
            needs_registry: true

    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup environment
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Run enhanced tests
        run: |
          echo "=== ${{ matrix.name }} ==="
          if [ -n "${{ matrix.package }}" ]; then
            ./scripts/test-with-manifest.sh \
              --env ${{ matrix.environment }} \
              --categories ${{ matrix.categories }} \
              ${{ matrix.package }}
          else
            ./scripts/test-with-manifest.sh \
              --env ${{ matrix.environment }} \
              --categories ${{ matrix.categories }}
          fi
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: ${{ matrix.environment }}
          CI: ${{ matrix.environment == 'ci' && 'true' || '' }}
          GITHUB_ACTIONS: true

  # Integration testing - runs only with label or schedule
  integration-testing:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [validate, ci]
    if: needs.validate.outputs.should_run_integration == 'true'
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup environment
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          echo "Running full integration test suite..."
          make test-integration
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration
          RUN_INTEGRATION_TESTS: true

      - name: Run external dependency tests (if credentials available)
        if: secrets.AWS_ACCESS_KEY_ID != '' || secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != ''
        run: |
          echo "Running tests with external dependencies..."
          if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"
          fi
          ./scripts/test-with-manifest.sh --env integration --categories external_deps
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

  # Manifest validation - runs when manually triggered or for comprehensive validation
  manifest-validation:
    name: Manifest Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Build test manifest tool
        run: make build-test-manifest

      - name: Validate manifest
        run: |
          echo "=== Validating Test Manifest ==="
          ./bin/test-manifest validate
          echo "✅ Manifest validation passed"

      - name: Test all make targets
        run: |
          echo "=== Testing Makefile Integration ==="
          targets=("test-summary" "test-manifest-validate" "test-ci" "test-unit")
          for target in "${targets[@]}"; do
            echo "Testing make target: $target"
            if make "$target" > /dev/null 2>&1; then
              echo "✅ Make target '$target' works"
            else
              echo "❌ Make target '$target' failed"
              exit 1
            fi
          done