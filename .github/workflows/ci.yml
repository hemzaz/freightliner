name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and verify all packages
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          target: build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run linting
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          target: lint
          cache-from: type=gha

      - name: Run static analysis
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          target: static
          cache-from: type=gha

      - name: Run tests
        run: |
          docker build --target test -t freightliner-test -f Dockerfile.ci .
          docker run --rm --network host -e REGISTRY_HOST=localhost:5100 freightliner-test

      - name: Verify module consistency
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          target: verify
          cache-from: type=gha

  traditional-build:
    name: Traditional Build (Fallback)
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Force module mode
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV

      - name: Build application
        run: go build -o bin/freightliner main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freightliner-binary-fallback
          path: bin/
          retention-days: 7

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: docker-build
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and extract binary
        run: |
          docker build --target build -t freightliner-build -f Dockerfile.ci .
          docker create --name temp-container freightliner-build
          docker cp temp-container:/tmp/freightliner ./freightliner
          docker rm temp-container
          mkdir -p bin/
          mv freightliner bin/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freightliner-binary
          path: bin/
          retention-days: 7