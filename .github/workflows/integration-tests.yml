name: Integration Tests

on:
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger for integration tests
    inputs:
      run_external_deps:
        description: 'Run tests requiring external dependencies (AWS/GCP)'
        required: false
        default: 'false'
        type: boolean

jobs:
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run on schedule, manual trigger, or labeled PRs
    if: >
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-integration-tests'))
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: true

      - name: Force Go module mode
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-integration-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: GO111MODULE=on GOFLAGS=-mod=mod GOPATH="" go mod download

      - name: Show test manifest summary
        run: |
          echo "=== Integration Test Configuration ==="
          make test-summary
        env:
          TEST_ENV: integration

      - name: Run integration tests
        run: |
          echo "Running integration test suite..."
          make test-integration
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration
          RUN_INTEGRATION_TESTS: true
          # Add external service credentials when available
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Run external dependency tests (if credentials available)
        if: |
          (secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '') ||
          secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' ||
          github.event.inputs.run_external_deps == 'true'
        run: |
          echo "Running tests with external dependencies..."
          # Set up GCP credentials if provided
          if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"
          fi
          
          # Run tests requiring external dependencies
          ./scripts/test-with-manifest.sh --env integration --categories external_deps
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration
          RUN_INTEGRATION_TESTS: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage.out
          retention-days: 30

  # Flaky test monitoring job
  flaky-tests:
    name: Flaky Test Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: true

      - name: Force Go module mode
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Run flaky tests multiple times
        run: |
          echo "Running flaky tests 5 times to detect intermittent failures..."
          
          FAILED_RUNS=0
          TOTAL_RUNS=5
          
          for i in $(seq 1 $TOTAL_RUNS); do
            echo "=== Run $i/$TOTAL_RUNS ==="
            
            if ./scripts/test-with-manifest.sh --env integration --categories flaky; then
              echo "✓ Run $i passed"
            else
              echo "✗ Run $i failed"
              FAILED_RUNS=$((FAILED_RUNS + 1))
            fi
            
            sleep 2  # Brief pause between runs
          done
          
          echo "=== Flaky Test Results ==="
          echo "Total runs: $TOTAL_RUNS"
          echo "Failed runs: $FAILED_RUNS"
          echo "Success rate: $(( (TOTAL_RUNS - FAILED_RUNS) * 100 / TOTAL_RUNS ))%"
          
          # Report results
          if [ $FAILED_RUNS -gt 0 ]; then
            echo "⚠️  Flaky tests detected: $FAILED_RUNS/$TOTAL_RUNS runs failed"
            echo "Consider reviewing tests marked as 'flaky' in test-manifest.yaml"
          else
            echo "✅ No flaky behavior detected in this run"
          fi
        env:
          REGISTRY_HOST: localhost:5100
          TEST_ENV: integration