name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24.5'
  REGISTRY: ghcr.io
  IMAGE_NAME: hemzaz/freightliner

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # ============================================
  # BUILD MATRIX - Multi-platform builds
  # ============================================
  build-binaries:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          GIT_COMMIT=$(git rev-parse HEAD)

          BINARY_NAME="freightliner-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" == "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build \
            -ldflags="-w -s -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" \
            -o "${BINARY_NAME}" \
            .

          # Calculate checksums
          if command -v sha256sum &> /dev/null; then
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            freightliner-*
            !freightliner-*.sha256
          retention-days: 7

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksum-${{ matrix.os }}-${{ matrix.arch }}
          path: freightliner-*.sha256
          retention-days: 7

  # ============================================
  # DOCKER BUILD - Multi-platform images
  # ============================================
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_TIME=${{ github.event.repository.updated_at }}
            GIT_COMMIT=${{ github.sha }}

      - name: Generate SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: 'cyclonedx'
          output: 'sbom.json'
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 90
        if: always()

  # ============================================
  # CREATE RELEASE - GitHub Release
  # ============================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy binaries
          find artifacts -name "freightliner-*" -type f ! -name "*.sha256" -exec cp {} release-assets/ \;

          # Copy checksums
          find artifacts -name "*.sha256" -exec cp {} release-assets/ \;

          # Create combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt

          # List files
          ls -lh

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          cat > release-notes.md << EOF
          # Freightliner ${VERSION}

          ## 🚀 What's Changed

          EOF

          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since ${PREV_TAG}" >> release-notes.md
            echo "" >> release-notes.md
            git log ${PREV_TAG}..${VERSION} --pretty=format:"- %s (%h)" --no-merges >> release-notes.md
          else
            echo "Initial release" >> release-notes.md
          fi

          cat >> release-notes.md << EOF

          ## 📦 Assets

          ### Binaries
          - Linux: amd64, arm64
          - macOS: amd64 (Intel), arm64 (Apple Silicon)
          - Windows: amd64

          ### Docker Images
          \`\`\`bash
          docker pull ghcr.io/hemzaz/freightliner:${VERSION}
          \`\`\`

          Multi-platform support: linux/amd64, linux/arm64

          ## 🔐 Verification

          Download \`checksums.txt\` and verify your binary:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`

          ## 📖 Documentation

          - [Installation Guide](https://github.com/hemzaz/freightliner#installation)
          - [User Guide](https://github.com/hemzaz/freightliner/blob/main/docs/usage.md)
          - [API Documentation](https://github.com/hemzaz/freightliner/blob/main/docs/API.md)

          ---

          🚂 Generated with [Claude Code](https://claude.com/claude-code)
          EOF

          cat release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release-assets/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # NOTIFY - Post-release notifications
  # ============================================
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()

    steps:
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create release announcement
        if: needs.create-release.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';

            // Create a discussion (requires discussions enabled)
            try {
              await github.rest.discussions.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚀 Release ${version} is now available!`,
                body: `We're excited to announce the release of Freightliner ${version}!

                📦 **Download**: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}

                🐳 **Docker**: \`docker pull ghcr.io/hemzaz/freightliner:${version}\`

                📖 **Changelog**: Check out the release notes for details on what's new and improved.

                Thank you to all contributors! 🙏`,
                category_id: 'announcements'
              });
            } catch (error) {
              console.log('Could not create discussion:', error.message);
            }
        continue-on-error: true

      - name: Post release status
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ Release ${{ steps.version.outputs.version }} published successfully!"
            echo "📦 Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
            echo "🐳 Docker: ghcr.io/hemzaz/freightliner:${{ steps.version.outputs.version }}"
          else
            echo "❌ Release failed. Check workflow logs for details."
            exit 1
          fi
