name: Security Hardened CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'

# Security: Use OIDC for authentication
permissions:
  contents: read
  security-events: write
  actions: read
  attestations: write
  id-token: write
  pull-requests: write

# Cancel previous runs for the same workflow on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v1.64.2'
  # Security hardening settings
  SECURITY_SCANNING_ENABLED: 'true'
  VULNERABILITY_THRESHOLD: 'high'
  CONTAINER_SCAN_ENABLED: 'true'
  DEPENDENCY_SCAN_ENABLED: 'true'
  SECRETS_SCAN_ENABLED: 'true'

jobs:
  # Security initialization and checks
  security-init:
    name: Security Initialization
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      security-baseline: ${{ steps.baseline.outputs.baseline-established }}
      scan-matrix: ${{ steps.matrix.outputs.scan-matrix }}
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            proxy.golang.org:443
            sum.golang.org:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443

      - name: Checkout code with security verification
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ github.token }}
          persist-credentials: false
          fetch-depth: 0

      - name: Establish security baseline
        id: baseline
        run: |
          echo "üîí Establishing security baseline for CI/CD pipeline"
          
          # Validate repository structure
          if [[ ! -f "go.mod" ]]; then
            echo "‚ùå Missing go.mod file"
            exit 1
          fi
          
          # Check for security policies
          security_files=(".github/security.md" "SECURITY.md" ".github/dependabot.yml")
          for file in "${security_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ Found security file: $file"
            else
              echo "‚ö†Ô∏è Missing security file: $file"
            fi
          done
          
          # Establish baseline
          echo "baseline-established=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Security baseline established"

      - name: Generate security scan matrix
        id: matrix
        run: |
          echo "üîç Generating security scan matrix"
          
          scan_matrix=$(cat << EOF
          {
            "include": [
              {
                "scan-type": "secrets",
                "tool": "gitleaks",
                "severity": "high"
              },
              {
                "scan-type": "dependencies",
                "tool": "govulncheck",
                "severity": "high"
              },
              {
                "scan-type": "sast",
                "tool": "gosec",
                "severity": "medium"
              },
              {
                "scan-type": "license",
                "tool": "licensee",
                "severity": "low"
              }
            ]
          }
          EOF
          )
          
          echo "scan-matrix=$scan_matrix" >> $GITHUB_OUTPUT
          echo "‚úÖ Security scan matrix generated"

  # Secret scanning job
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    needs: security-init
    timeout-minutes: 15
    if: env.SECRETS_SCAN_ENABLED == 'true'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Run GitLeaks secret scanning
        uses: gitleaks/gitleaks-action@cb7149a9504b495b5486ab0a14aa523289692dcc # v2.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false

      - name: Upload secret scan results
        uses: github/codeql-action/upload-sarif@461ef6c76ddd5b007c5c4e5b2f63b6521e5c2bff # v3.26.6
        if: always()
        with:
          sarif_file: results.sarif
          category: secret-scanning

  # Vulnerability scanning job
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: security-init
    timeout-minutes: 20
    if: env.DEPENDENCY_SCAN_ENABLED == 'true'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            proxy.golang.org:443
            sum.golang.org:443
            vuln.go.dev:443

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Go with security verification
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          # Removed check-latest to use exact version

      - name: Install govulncheck
        run: |
          echo "üîß Installing govulncheck for vulnerability scanning"
          go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run Go vulnerability check
        run: |
          echo "üîç Running Go vulnerability scanning"
          
          # Create output directory
          mkdir -p security-reports
          
          # Run govulncheck
          if govulncheck -json ./... > security-reports/govulncheck.json; then
            echo "‚úÖ No vulnerabilities found"
          else
            echo "‚ö†Ô∏è Vulnerabilities detected"
            
            # Parse and display vulnerabilities
            if command -v jq &> /dev/null; then
              echo "üìã Vulnerability Summary:"
              jq -r '.finding[] | select(.type == "vulnerability") | "- \(.symbol): \(.message)"' security-reports/govulncheck.json || true
            fi
            
            # Check severity threshold
            high_vuln_count=$(jq -r '[.finding[] | select(.type == "vulnerability" and .severity == "high")] | length' security-reports/govulncheck.json 2>/dev/null || echo "0")
            
            if [[ "$high_vuln_count" -gt 0 ]] && [[ "${{ env.VULNERABILITY_THRESHOLD }}" == "high" ]]; then
              echo "‚ùå High severity vulnerabilities found: $high_vuln_count"
              exit 1
            fi
          fi

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: vulnerability-scan-results
          path: security-reports/
          retention-days: 30

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scanning
    runs-on: ubuntu-latest
    needs: security-init
    timeout-minutes: 15
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@3e0ca82aee9e4b12dceac6d0d6c6b8b82bf62c5d # v2.1.1
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SAST scan results
        uses: github/codeql-action/upload-sarif@461ef6c76ddd5b007c5c4e5b2f63b6521e5c2bff # v3.26.6
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: gosec-sast

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: security-init
    timeout-minutes: 20
    if: env.CONTAINER_SCAN_ENABLED == 'true'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
            ghcr.io:443

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Build container image for scanning
        run: |
          echo "üê≥ Building container image for security scanning"
          
          # Build image with security labels
          docker build \
            --tag freightliner:security-scan \
            --label "security.scan=true" \
            --label "security.timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --label "security.commit=${{ github.sha }}" \
            .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb # v0.26.0
        with:
          image-ref: 'freightliner:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@461ef6c76ddd5b007c5c4e5b2f63b6521e5c2bff # v3.26.6
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: container-security

  # License compliance scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    needs: security-init
    timeout-minutes: 10
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install license scanner
        run: |
          echo "üîß Installing go-licenses for license compliance scanning"
          go install github.com/google/go-licenses@latest

      - name: Run license compliance check
        run: |
          echo "üìú Running license compliance check"
          
          # Create output directory
          mkdir -p security-reports
          
          # Scan for licenses
          go-licenses report ./... > security-reports/licenses.csv
          
          # Check for forbidden licenses
          forbidden_licenses=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          found_forbidden=false
          
          for license in "${forbidden_licenses[@]}"; do
            if grep -q "$license" security-reports/licenses.csv; then
              echo "‚ùå Forbidden license found: $license"
              found_forbidden=true
            fi
          done
          
          if [[ "$found_forbidden" == "true" ]]; then
            echo "‚ùå License compliance check failed"
            exit 1
          else
            echo "‚úÖ License compliance check passed"
          fi

      - name: Upload license scan results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: license-scan-results
          path: security-reports/licenses.csv
          retention-days: 30

  # Build with security attestation
  secure-build:
    name: Secure Build & Attestation
    runs-on: ubuntu-latest
    needs: [security-init, secret-scan, vulnerability-scan, sast-scan]
    timeout-minutes: 30
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
            ghcr.io:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Build with SLSA provenance
        run: |
          echo "üî® Building with SLSA provenance generation"
          
          # Generate build metadata
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          BUILD_VERSION="${{ github.sha }}"
          
          # Build Go binary with security flags
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -a -installsuffix cgo \
            -ldflags="-w -s -X main.version=${BUILD_VERSION} -X main.buildTime=${BUILD_TIME} -extldflags '-static'" \
            -tags 'netgo osusergo static_build' \
            -trimpath \
            -o freightliner \
            .
          
          # Generate checksums
          sha256sum freightliner > freightliner.sha256
          
          echo "‚úÖ Secure build completed"

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
        with:
          base64-subjects: "${{ hashFiles('freightliner') }}"
          compile-generator: true

      - name: Sign artifacts with Cosign
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382 # v3.6.0

      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: secure-build-artifacts
          path: |
            freightliner
            freightliner.sha256
          retention-days: 30

  # Security gates and final validation
  security-gates:
    name: Security Gates
    runs-on: ubuntu-latest
    needs: [secret-scan, vulnerability-scan, sast-scan, container-security, license-scan, secure-build]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Evaluate security posture
        run: |
          echo "üîç Evaluating overall security posture"
          
          # Check job results
          secret_scan_result="${{ needs.secret-scan.result }}"
          vuln_scan_result="${{ needs.vulnerability-scan.result }}"
          sast_scan_result="${{ needs.sast-scan.result }}"
          container_scan_result="${{ needs.container-security.result }}"
          license_scan_result="${{ needs.license-scan.result }}"
          build_result="${{ needs.secure-build.result }}"
          
          echo "üìã Security Scan Results:"
          echo "  Secret Scan: $secret_scan_result"
          echo "  Vulnerability Scan: $vuln_scan_result"
          echo "  SAST Scan: $sast_scan_result"
          echo "  Container Scan: $container_scan_result"
          echo "  License Scan: $license_scan_result"
          echo "  Secure Build: $build_result"
          
          # Count failures
          failed_scans=0
          critical_failures=0
          
          # Critical security gates
          critical_scans=("$secret_scan_result" "$vuln_scan_result")
          for result in "${critical_scans[@]}"; do
            if [[ "$result" == "failure" ]]; then
              critical_failures=$((critical_failures + 1))
            fi
          done
          
          # All security scans
          all_scans=("$secret_scan_result" "$vuln_scan_result" "$sast_scan_result" "$container_scan_result" "$license_scan_result" "$build_result")
          for result in "${all_scans[@]}"; do
            if [[ "$result" == "failure" ]]; then
              failed_scans=$((failed_scans + 1))
            fi
          done
          
          # Determine overall security status
          if [[ $critical_failures -gt 0 ]]; then
            echo "‚ùå CRITICAL SECURITY GATE FAILURE"
            echo "Critical security scans failed: $critical_failures"
            echo "Deployment is BLOCKED due to security policy violation"
            exit 1
          elif [[ $failed_scans -gt 2 ]]; then
            echo "‚ö†Ô∏è MULTIPLE SECURITY FAILURES"
            echo "Failed security scans: $failed_scans"
            echo "Manual review required before deployment"
            exit 1
          elif [[ $failed_scans -gt 0 ]]; then
            echo "‚ö†Ô∏è MINOR SECURITY ISSUES"
            echo "Failed security scans: $failed_scans"
            echo "Proceeding with caution - monitor deployment"
          else
            echo "‚úÖ ALL SECURITY GATES PASSED"
            echo "Application meets security requirements for deployment"
          fi

      - name: Generate security summary
        if: always()
        run: |
          echo "üìã Generating security summary report"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Security Hardened CI Results
          
          **Pipeline Security Status**: $(if [[ "${{ job.status }}" == "success" ]]; then echo "‚úÖ PASSED"; else echo "‚ùå FAILED"; fi)
          
          ### Security Scan Results
          | Scan Type | Status | Critical |
          |-----------|--------|----------|
          | Secret Scanning | ${{ needs.secret-scan.result }} | ‚úÖ |
          | Vulnerability Scanning | ${{ needs.vulnerability-scan.result }} | ‚úÖ |
          | SAST Analysis | ${{ needs.sast-scan.result }} | ‚ö†Ô∏è |
          | Container Security | ${{ needs.container-security.result }} | ‚ö†Ô∏è |
          | License Compliance | ${{ needs.license-scan.result }} | ‚ÑπÔ∏è |
          | Secure Build | ${{ needs.secure-build.result }} | ‚úÖ |
          
          ### Security Features Enabled
          - ‚úÖ Hardened GitHub Actions runner
          - ‚úÖ OIDC authentication with minimal permissions
          - ‚úÖ All actions pinned to SHA commits
          - ‚úÖ Secret scanning with GitLeaks
          - ‚úÖ Vulnerability scanning with govulncheck
          - ‚úÖ SAST analysis with Gosec
          - ‚úÖ Container scanning with Trivy
          - ‚úÖ License compliance checking
          - ‚úÖ SLSA build provenance
          - ‚úÖ Artifact signing with Cosign
          - ‚úÖ Security gates and policy enforcement
          
          ### Next Steps
          $(if [[ "${{ job.status }}" == "success" ]]; then
            echo "- ‚úÖ All security requirements met"
            echo "- ‚úÖ Ready for deployment"
            echo "- üìä Monitor security metrics"
          else
            echo "- ‚ùå Address security findings before deployment"
            echo "- üîç Review failed security scans"  
            echo "- üõ†Ô∏è Implement remediation measures"
          fi)
          EOF