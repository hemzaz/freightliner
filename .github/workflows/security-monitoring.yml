name: Security Monitoring & Alerting

on:
  schedule:
    # Run daily security monitoring at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - dependencies-only
          - containers-only
      alert_level:
        description: 'Minimum alert level threshold'
        required: false
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium

# Security: Minimal permissions for monitoring
permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  MONITORING_ENABLED: 'true'
  ALERT_WEBHOOK: ${{ secrets.SECURITY_ALERT_WEBHOOK }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}

jobs:
  # Security posture assessment
  security-posture:
    name: Security Posture Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      posture-score: ${{ steps.assessment.outputs.posture-score }}
      critical-issues: ${{ steps.assessment.outputs.critical-issues }}
      high-issues: ${{ steps.assessment.outputs.high-issues }}
      recommendations: ${{ steps.assessment.outputs.recommendations }}
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Security posture assessment
        id: assessment
        run: |
          echo "🔍 Conducting comprehensive security posture assessment"
          
          # Initialize metrics
          posture_score=0
          critical_issues=0
          high_issues=0
          recommendations=()
          
          # Check 1: Repository configuration security
          echo "📋 Checking repository security configuration..."
          
          if [[ -f ".github/security.yml" ]]; then
            posture_score=$((posture_score + 10))
            echo "✅ Security policy configured"
          else
            critical_issues=$((critical_issues + 1))
            recommendations+=("Configure security policy (.github/security.yml)")
          fi
          
          if [[ -f ".github/dependabot.yml" ]]; then
            posture_score=$((posture_score + 10))
            echo "✅ Dependency updates configured"
          else
            high_issues=$((high_issues + 1))
            recommendations+=("Configure Dependabot for dependency updates")
          fi
          
          if [[ -f ".gitleaks.toml" ]]; then
            posture_score=$((posture_score + 10))
            echo "✅ Secret scanning configured"
          else
            critical_issues=$((critical_issues + 1))
            recommendations+=("Configure GitLeaks for secret scanning")
          fi
          
          # Check 2: Workflow security
          echo "🔧 Checking workflow security..."
          
          security_workflows=$(find .github/workflows -name "*.yml" -exec grep -l "security" {} \; | wc -l)
          if [[ $security_workflows -gt 0 ]]; then
            posture_score=$((posture_score + 15))
            echo "✅ Security workflows present: $security_workflows"
          else
            critical_issues=$((critical_issues + 1))
            recommendations+=("Implement security scanning workflows")
          fi
          
          # Check 3: Container security
          echo "🐳 Checking container security..."
          
          if [[ -f "Dockerfile.secure" ]]; then
            posture_score=$((posture_score + 15))
            echo "✅ Secure Dockerfile present"
          else
            high_issues=$((high_issues + 1))
            recommendations+=("Create security-hardened Dockerfile")
          fi
          
          # Check 4: Dependency security
          echo "📦 Checking dependency security..."
          
          if [[ -f "go.mod" ]]; then
            # Check for pinned versions
            unpinned_deps=$(grep -c "latest" go.mod || echo "0")
            if [[ $unpinned_deps -eq 0 ]]; then
              posture_score=$((posture_score + 10))
              echo "✅ Dependencies properly pinned"
            else
              high_issues=$((high_issues + 1))
              recommendations+=("Pin all dependencies to specific versions")
            fi
          fi
          
          # Check 5: Documentation and compliance
          echo "📚 Checking security documentation..."
          
          security_docs=0
          [[ -f "SECURITY.md" ]] && security_docs=$((security_docs + 1))
          [[ -f "SECURITY_AUDIT_REPORT.md" ]] && security_docs=$((security_docs + 1))
          
          if [[ $security_docs -gt 0 ]]; then
            posture_score=$((posture_score + $((security_docs * 5))))
            echo "✅ Security documentation present: $security_docs files"
          else
            high_issues=$((high_issues + 1))
            recommendations+=("Create security documentation (SECURITY.md)")
          fi
          
          # Calculate final score (max 100)
          posture_score=$((posture_score > 100 ? 100 : posture_score))
          
          # Determine security grade
          if [[ $posture_score -ge 90 ]]; then
            security_grade="A"
          elif [[ $posture_score -ge 80 ]]; then
            security_grade="B"
          elif [[ $posture_score -ge 70 ]]; then
            security_grade="C"
          elif [[ $posture_score -ge 60 ]]; then
            security_grade="D"
          else
            security_grade="F"
          fi
          
          echo "📊 Security Posture Assessment Results:"
          echo "   Score: $posture_score/100 (Grade: $security_grade)"
          echo "   Critical Issues: $critical_issues"
          echo "   High Issues: $high_issues"
          echo "   Recommendations: ${#recommendations[@]}"
          
          # Set outputs
          echo "posture-score=$posture_score" >> $GITHUB_OUTPUT
          echo "critical-issues=$critical_issues" >> $GITHUB_OUTPUT
          echo "high-issues=$high_issues" >> $GITHUB_OUTPUT
          
          # Create recommendations string
          recommendations_str=""
          for rec in "${recommendations[@]}"; do
            recommendations_str="$recommendations_str- $rec\n"
          done
          echo "recommendations<<EOF" >> $GITHUB_OUTPUT
          echo -e "$recommendations_str" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Vulnerability scanning and monitoring
  vulnerability-monitoring:
    name: Vulnerability Monitoring
    runs-on: ubuntu-latest
    needs: security-posture
    timeout-minutes: 25
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies-only'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: '1.24.5'

      - name: Install vulnerability scanning tools
        run: |
          echo "🔧 Installing vulnerability scanning tools"
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/sonatypecommunity/nancy@latest

      - name: Run comprehensive vulnerability scan
        id: vuln-scan
        run: |
          echo "🔍 Running comprehensive vulnerability scanning"
          
          # Create reports directory
          mkdir -p security-reports/vulnerabilities
          
          # Initialize counters
          critical_vulns=0
          high_vulns=0
          medium_vulns=0
          total_vulns=0
          
          # Run govulncheck
          echo "Running govulncheck..."
          if govulncheck -json ./... > security-reports/vulnerabilities/govulncheck.json 2>&1; then
            echo "✅ govulncheck scan completed"
            
            # Parse results if jq is available
            if command -v jq &> /dev/null; then
              critical_vulns=$(jq -r '[.finding[] | select(.type == "vulnerability" and .severity == "critical")] | length' security-reports/vulnerabilities/govulncheck.json 2>/dev/null || echo "0")
              high_vulns=$(jq -r '[.finding[] | select(.type == "vulnerability" and .severity == "high")] | length' security-reports/vulnerabilities/govulncheck.json 2>/dev/null || echo "0")
              medium_vulns=$(jq -r '[.finding[] | select(.type == "vulnerability" and .severity == "medium")] | length' security-reports/vulnerabilities/govulncheck.json 2>/dev/null || echo "0")
              total_vulns=$((critical_vulns + high_vulns + medium_vulns))
            fi
          else
            echo "⚠️ govulncheck scan encountered issues"
          fi
          
          # Run Nancy for dependency analysis
          echo "Running Nancy dependency scanner..."
          if go list -json -deps ./... | nancy sleuth > security-reports/vulnerabilities/nancy.txt 2>&1; then
            echo "✅ Nancy scan completed"
          else
            echo "⚠️ Nancy scan encountered issues"
          fi
          
          echo "📊 Vulnerability Scan Results:"
          echo "   Critical: $critical_vulns"
          echo "   High: $high_vulns"
          echo "   Medium: $medium_vulns"
          echo "   Total: $total_vulns"
          
          # Set outputs for alerting
          echo "critical-vulns=$critical_vulns" >> $GITHUB_OUTPUT
          echo "high-vulns=$high_vulns" >> $GITHUB_OUTPUT
          echo "medium-vulns=$medium_vulns" >> $GITHUB_OUTPUT
          echo "total-vulns=$total_vulns" >> $GITHUB_OUTPUT
          
          # Determine if alerting is needed
          alert_threshold_critical=0
          alert_threshold_high=2
          
          case "${{ github.event.inputs.alert_level || 'high' }}" in
            "critical") alert_needed=$([[ $critical_vulns -gt $alert_threshold_critical ]] && echo "true" || echo "false") ;;
            "high") alert_needed=$([[ $high_vulns -gt $alert_threshold_high ]] && echo "true" || echo "false") ;;
            *) alert_needed=$([[ $total_vulns -gt 5 ]] && echo "true" || echo "false") ;;
          esac
          
          echo "alert-needed=$alert_needed" >> $GITHUB_OUTPUT

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: vulnerability-monitoring-reports
          path: security-reports/
          retention-days: 90

  # Container security monitoring
  container-monitoring:
    name: Container Security Monitoring
    runs-on: ubuntu-latest
    needs: security-posture
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers-only'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Build container for monitoring
        run: |
          echo "🐳 Building container for security monitoring"
          
          # Use secure Dockerfile if available
          dockerfile="Dockerfile"
          if [[ -f "Dockerfile.secure" ]]; then
            dockerfile="Dockerfile.secure"
            echo "Using security-hardened Dockerfile"
          fi
          
          docker build -f "$dockerfile" -t freightliner:monitoring .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb # v0.26.0
        id: container-scan
        with:
          image-ref: 'freightliner:monitoring'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'  # Don't fail the job

      - name: Process container scan results
        id: process-results
        run: |
          echo "📊 Processing container scan results"
          
          if [[ -f "trivy-results.json" ]] && command -v jq &> /dev/null; then
            # Parse Trivy results
            critical_issues=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
            high_issues=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
            medium_issues=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
            
            echo "Container scan results:"
            echo "  Critical: $critical_issues"
            echo "  High: $high_issues"
            echo "  Medium: $medium_issues"
            
            # Set outputs
            echo "container-critical=$critical_issues" >> $GITHUB_OUTPUT
            echo "container-high=$high_issues" >> $GITHUB_OUTPUT
            echo "container-medium=$medium_issues" >> $GITHUB_OUTPUT
            
            # Determine alert need
            alert_needed=$([[ $critical_issues -gt 0 ]] && echo "true" || echo "false")
            echo "container-alert-needed=$alert_needed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Unable to process container scan results"
            echo "container-alert-needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload container scan results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: container-monitoring-results
          path: trivy-results.json
          retention-days: 90

  # Security alerting and notifications
  security-alerting:
    name: Security Alerting
    runs-on: ubuntu-latest
    needs: [security-posture, vulnerability-monitoring, container-monitoring]
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Evaluate alert conditions
        id: evaluate-alerts
        run: |
          echo "🚨 Evaluating security alert conditions"
          
          # Get results from previous jobs
          posture_score="${{ needs.security-posture.outputs.posture-score }}"
          critical_issues="${{ needs.security-posture.outputs.critical-issues }}"
          high_issues="${{ needs.security-posture.outputs.high-issues }}"
          
          critical_vulns="${{ needs.vulnerability-monitoring.outputs.critical-vulns || '0' }}"
          high_vulns="${{ needs.vulnerability-monitoring.outputs.high-vulns || '0' }}"
          vuln_alert_needed="${{ needs.vulnerability-monitoring.outputs.alert-needed || 'false' }}"
          
          container_critical="${{ needs.container-monitoring.outputs.container-critical || '0' }}"
          container_high="${{ needs.container-monitoring.outputs.container-high || '0' }}"
          container_alert_needed="${{ needs.container-monitoring.outputs.container-alert-needed || 'false' }}"
          
          # Determine alert level and message
          alert_level="info"
          alert_message="Security monitoring completed successfully"
          send_alert=false
          
          if [[ $critical_issues -gt 0 ]] || [[ $critical_vulns -gt 0 ]] || [[ $container_critical -gt 0 ]]; then
            alert_level="critical"
            alert_message="🚨 CRITICAL SECURITY ISSUES DETECTED"
            send_alert=true
          elif [[ $high_issues -gt 2 ]] || [[ $high_vulns -gt 3 ]] || [[ $container_high -gt 5 ]]; then
            alert_level="high"
            alert_message="⚠️ High severity security issues detected"
            send_alert=true
          elif [[ $posture_score -lt 70 ]]; then
            alert_level="medium"
            alert_message="📉 Security posture score below threshold"
            send_alert=true
          fi
          
          echo "Alert evaluation:"
          echo "  Level: $alert_level"
          echo "  Send Alert: $send_alert"
          echo "  Message: $alert_message"
          
          # Set outputs
          echo "alert-level=$alert_level" >> $GITHUB_OUTPUT
          echo "send-alert=$send_alert" >> $GITHUB_OUTPUT
          echo "alert-message=$alert_message" >> $GITHUB_OUTPUT

      - name: Send security alerts
        if: steps.evaluate-alerts.outputs.send-alert == 'true'
        run: |
          echo "📢 Sending security alerts"
          
          alert_level="${{ steps.evaluate-alerts.outputs.alert-level }}"
          alert_message="${{ steps.evaluate-alerts.outputs.alert-message }}"
          
          # Prepare alert payload
          alert_payload=$(cat << EOF
          {
            "alert_level": "$alert_level",
            "message": "$alert_message",
            "repository": "${{ github.repository }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "details": {
              "posture_score": "${{ needs.security-posture.outputs.posture-score }}",
              "critical_issues": "${{ needs.security-posture.outputs.critical-issues }}",
              "high_issues": "${{ needs.security-posture.outputs.high-issues }}",
              "critical_vulns": "${{ needs.vulnerability-monitoring.outputs.critical-vulns || '0' }}",
              "high_vulns": "${{ needs.vulnerability-monitoring.outputs.high-vulns || '0' }}",
              "container_critical": "${{ needs.container-monitoring.outputs.container-critical || '0' }}",
              "container_high": "${{ needs.container-monitoring.outputs.container-high || '0' }}"
            },
            "recommendations": "${{ needs.security-posture.outputs.recommendations }}"
          }
          EOF
          )
          
          # Send to webhook if configured
          if [[ -n "${{ env.ALERT_WEBHOOK }}" ]]; then
            echo "Sending alert to webhook..."
            curl -X POST "${{ env.ALERT_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d "$alert_payload" || echo "Webhook alert failed"
          fi
          
          # Send to Slack if configured
          if [[ -n "${{ env.SLACK_WEBHOOK }}" ]]; then
            echo "Sending alert to Slack..."
            slack_payload=$(cat << EOF
          {
            "text": "$alert_message",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Security Alert: ${{ github.repository }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Alert Level:* $alert_level\n*Repository:* ${{ github.repository }}\n*Workflow:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Security Score:* ${{ needs.security-posture.outputs.posture-score }}/100"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Critical Issues:* ${{ needs.security-posture.outputs.critical-issues }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Critical Vulns:* ${{ needs.vulnerability-monitoring.outputs.critical-vulns || '0' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Container Issues:* ${{ needs.container-monitoring.outputs.container-critical || '0' }}"
                  }
                ]
              }
            ]
          }
          EOF
            )
            
            curl -X POST "${{ env.SLACK_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d "$slack_payload" || echo "Slack alert failed"
          fi

      - name: Create security issue
        if: steps.evaluate-alerts.outputs.alert-level == 'critical'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const title = '🚨 Critical Security Issues Detected';
            const body = `
            ## Critical Security Alert
            
            **Alert Level:** ${{ steps.evaluate-alerts.outputs.alert-level }}
            **Message:** ${{ steps.evaluate-alerts.outputs.alert-message }}
            **Timestamp:** ${new Date().toISOString()}
            
            ### Security Metrics
            - **Security Posture Score:** ${{ needs.security-posture.outputs.posture-score }}/100
            - **Critical Issues:** ${{ needs.security-posture.outputs.critical-issues }}
            - **High Issues:** ${{ needs.security-posture.outputs.high-issues }}
            - **Critical Vulnerabilities:** ${{ needs.vulnerability-monitoring.outputs.critical-vulns || '0' }}
            - **High Vulnerabilities:** ${{ needs.vulnerability-monitoring.outputs.high-vulns || '0' }}
            - **Container Critical Issues:** ${{ needs.container-monitoring.outputs.container-critical || '0' }}
            
            ### Recommendations
            ${{ needs.security-posture.outputs.recommendations }}
            
            ### Next Steps
            1. Review the security monitoring workflow results
            2. Address critical security issues immediately  
            3. Implement recommended security improvements
            4. Re-run security monitoring to verify fixes
            
            **Workflow Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'monitoring']
            });

      - name: Generate monitoring summary
        if: always()
        run: |
          echo "📋 Generating security monitoring summary"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Security Monitoring Results
          
          **Monitoring Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Alert Level:** ${{ steps.evaluate-alerts.outputs.alert-level }}
          **Alert Sent:** ${{ steps.evaluate-alerts.outputs.send-alert }}
          
          ### Security Posture
          | Metric | Value | Status |
          |--------|-------|--------|
          | Security Score | ${{ needs.security-posture.outputs.posture-score }}/100 | $(if [[ ${{ needs.security-posture.outputs.posture-score }} -ge 80 ]]; then echo "✅ Good"; elif [[ ${{ needs.security-posture.outputs.posture-score }} -ge 60 ]]; then echo "⚠️ Fair"; else echo "❌ Poor"; fi) |
          | Critical Issues | ${{ needs.security-posture.outputs.critical-issues }} | $(if [[ ${{ needs.security-posture.outputs.critical-issues }} -eq 0 ]]; then echo "✅"; else echo "❌"; fi) |
          | High Issues | ${{ needs.security-posture.outputs.high-issues }} | $(if [[ ${{ needs.security-posture.outputs.high-issues }} -le 2 ]]; then echo "✅"; else echo "⚠️"; fi) |
          
          ### Vulnerability Status
          | Type | Critical | High | Medium | Status |
          |------|----------|------|--------|--------|
          | Dependencies | ${{ needs.vulnerability-monitoring.outputs.critical-vulns || 'N/A' }} | ${{ needs.vulnerability-monitoring.outputs.high-vulns || 'N/A' }} | ${{ needs.vulnerability-monitoring.outputs.medium-vulns || 'N/A' }} | $(if [[ "${{ needs.vulnerability-monitoring.outputs.alert-needed }}" == "true" ]]; then echo "⚠️ Alert"; else echo "✅ OK"; fi) |
          | Containers | ${{ needs.container-monitoring.outputs.container-critical || 'N/A' }} | ${{ needs.container-monitoring.outputs.container-high || 'N/A' }} | ${{ needs.container-monitoring.outputs.container-medium || 'N/A' }} | $(if [[ "${{ needs.container-monitoring.outputs.container-alert-needed }}" == "true" ]]; then echo "⚠️ Alert"; else echo "✅ OK"; fi) |
          
          ### Recommendations
          ${{ needs.security-posture.outputs.recommendations }}
          
          ### Next Monitoring
          - **Scheduled:** Daily at 02:00 UTC
          - **Manual:** Use workflow_dispatch to run on-demand
          - **Alerts:** Configured for critical and high severity issues
          EOF