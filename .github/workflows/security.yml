# Security scanning and compliance workflow
name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        check-latest: true

    - name: Run Nancy (Go dependency scanner)
      run: |
        go install github.com/sonatypeoss/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Run Govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # SAST scanning
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        check-latest: true

    - name: Install and run Gosec
      run: |
        echo "ðŸ”§ Installing gosec security scanner..."
        # Install gosec from the correct repository (moved to securego)
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        echo "ðŸ”’ Running gosec security scan..."
        gosec -no-fail -fmt sarif -out gosec.sarif ./...

    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif

  # Container scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t freightliner:scan .

    - name: Run Trivy scanner
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: 'freightliner:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Anchore Grype scanner
      uses: anchore/scan-action@v4
      with:
        image: 'freightliner:scan'
        fail-build: false
        output-format: sarif

    - name: Upload Anchore scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # License compliance
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        check-latest: true

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        go-licenses check ./...
        go-licenses csv ./... > licenses.csv

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.csv

  # Secrets scanning
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure scanning
  iac-scan:
    name: Infrastructure as Code Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,dockerfile
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif

    - name: Run Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: terraform
        iac_version: v14
        policy_type: aws
        only_warn: true
        sarif_upload: true

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, license-scan, secrets-scan, iac-scan]
    if: always()
    steps:
    - name: Security scan summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SAST Scan | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Scan | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| IaC Scan | ${{ needs.iac-scan.result }} |" >> $GITHUB_STEP_SUMMARY