name: Test Manifest Validation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'test-manifest.yaml'
      - 'test-manifest.yml'
      - 'pkg/testing/**'
      - 'cmd/test-manifest/**'
      - '.github/workflows/test-manifest-validation.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'test-manifest.yaml'
      - 'test-manifest.yml'
      - 'pkg/testing/**'
      - 'cmd/test-manifest/**'
      - '.github/workflows/test-manifest-validation.yml'
  workflow_dispatch:

jobs:
  validate-manifest:
    name: Validate Test Manifest
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: true

      - name: Force Go module mode
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Build test manifest tool
        run: make build-test-manifest

      - name: Validate manifest syntax
        run: |
          echo "=== Validating Test Manifest Syntax ==="
          ./bin/test-manifest validate
          echo "✅ Manifest syntax validation passed"

      - name: Check manifest completeness
        run: |
          echo "=== Checking Manifest Completeness ==="
          
          # Get all test files
          echo "Finding all test files in the project..."
          find . -name "*_test.go" -not -path "./vendor/*" > test_files.txt
          
          # Extract test function names
          echo "Extracting test function names..."
          grep -h "^func Test" $(cat test_files.txt) | \
            sed 's/func \([^(]*\).*/\1/' | \
            sort -u > actual_tests.txt
            
          echo "Found $(wc -l < actual_tests.txt) test functions"
          
          # Get tests from manifest
          echo "Getting tests from manifest..."
          ./bin/test-manifest list-packages | \
            grep -E "Tests:" | \
            sed 's/.*Tests: \([0-9]*\).*/\1/' | \
            awk '{sum += $1} END {print sum}' > manifest_test_count.txt
            
          ACTUAL_COUNT=$(wc -l < actual_tests.txt)
          MANIFEST_COUNT=$(cat manifest_test_count.txt)
          
          echo "Tests in codebase: $ACTUAL_COUNT"
          echo "Tests in manifest: $MANIFEST_COUNT"
          
          # Show coverage percentage
          if [ $ACTUAL_COUNT -gt 0 ]; then
            COVERAGE=$(( MANIFEST_COUNT * 100 / ACTUAL_COUNT ))
            echo "Manifest coverage: ${COVERAGE}%"
            
            if [ $COVERAGE -lt 50 ]; then
              echo "⚠️  Warning: Low manifest coverage (${COVERAGE}%)"
              echo "Consider adding more tests to the manifest for better control"
            else
              echo "✅ Good manifest coverage (${COVERAGE}%)"
            fi
          fi

      - name: Test environment detection
        run: |
          echo "=== Testing Environment Detection ==="
          
          # Test CI environment detection
          echo "Testing CI environment detection..."
          CI=true GITHUB_ACTIONS=true ./bin/test-manifest summary | head -1 | grep -q "ci" && \
            echo "✅ CI environment detected correctly" || \
            echo "❌ CI environment detection failed"
          
          # Test local environment detection
          echo "Testing local environment detection..."  
          unset CI && unset GITHUB_ACTIONS && ./bin/test-manifest summary | head -1 | grep -q "local" && \
            echo "✅ Local environment detected correctly" || \
            echo "❌ Local environment detection failed"
          
          # Test integration environment detection
          echo "Testing integration environment detection..."
          TEST_ENV=integration ./bin/test-manifest summary | head -1 | grep -q "integration" && \
            echo "✅ Integration environment detected correctly" || \
            echo "❌ Integration environment detection failed"

      - name: Test category filtering
        run: |
          echo "=== Testing Category Filtering ==="
          
          # Test each category
          categories=("unit" "external_deps" "flaky" "integration" "incomplete" "timing_sensitive" "metrics" "worker_pool")
          
          for category in "${categories[@]}"; do
            echo "Testing category: $category"
            
            # Try to run dry-run with this category
            if ./scripts/test-with-manifest.sh --dry-run --categories "$category" > /dev/null 2>&1; then
              echo "✅ Category '$category' filtering works"
            else
              echo "❌ Category '$category' filtering failed"
            fi
          done

      - name: Test Makefile integration
        run: |
          echo "=== Testing Makefile Integration ==="
          
          # Test all manifest-related make targets
          targets=("test-summary" "test-manifest-validate" "test-ci" "test-unit" "test-local")
          
          for target in "${targets[@]}"; do
            echo "Testing make target: $target"
            
            if make "$target" > /dev/null 2>&1; then
              echo "✅ Make target '$target' works"
            else
              echo "❌ Make target '$target' failed"
              exit 1
            fi
          done

      - name: Generate manifest report
        if: always()
        run: |
          echo "=== Test Manifest Report ===" > manifest_report.md
          echo "" >> manifest_report.md
          
          echo "## Validation Results" >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          ./bin/test-manifest validate >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          echo "" >> manifest_report.md
          
          echo "## Categories" >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          ./bin/test-manifest list-categories >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          echo "" >> manifest_report.md
          
          echo "## Packages" >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          ./bin/test-manifest list-packages >> manifest_report.md
          echo "\`\`\`" >> manifest_report.md
          
          # Add to step summary
          cat manifest_report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload manifest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-manifest-report
          path: |
            manifest_report.md
            test_files.txt
            actual_tests.txt 
          retention-days: 30

  # Test the manifest system with actual test execution
  test-manifest-functionality:
    name: Test Manifest Functionality
    runs-on: ubuntu-latest
    needs: validate-manifest
    
    services:
      registry:
        image: registry:2
        ports:
          - 5100:5000
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          --health-start-period 10s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Download dependencies
        run: go mod download

      - name: Test CI environment filtering
        run: |
          echo "=== Testing CI Environment Test Filtering ==="
          
          # This should skip external dependency tests and flaky tests
          CI=true GITHUB_ACTIONS=true make test-ci
          
          echo "✅ CI test filtering completed successfully"
        env:
          REGISTRY_HOST: localhost:5100

      - name: Test unit category filtering
        run: |
          echo "=== Testing Unit Category Filtering ==="
          
          # This should only run unit tests
          make test-unit
          
          echo "✅ Unit test filtering completed successfully"

      - name: Compare execution times
        run: |
          echo "=== Comparing Execution Times ==="
          
          # Time unit tests
          echo "Timing unit tests..."
          time make test-unit > unit_time.log 2>&1 &
          UNIT_PID=$!
          
          # Time CI tests  
          echo "Timing CI tests..."
          time make test-ci > ci_time.log 2>&1 &
          CI_PID=$!
          
          # Wait for both to complete
          wait $UNIT_PID
          wait $CI_PID
          
          echo "Unit test timing:"
          tail -1 unit_time.log
          echo "CI test timing:"
          tail -1 ci_time.log
          
          echo "✅ Performance comparison completed"
        env:
          REGISTRY_HOST: localhost:5100