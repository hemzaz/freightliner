name: Test Matrix

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    # Only run matrix on PRs with the label
    types: [opened, synchronize, labeled]

jobs:
  # Check if we should run the matrix
  check-matrix:
    name: Check Matrix Trigger
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if matrix should run
        id: check
        run: |
          # Run matrix on master branch pushes or labeled PRs
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ contains(github.event.pull_request.labels.*.name, 'run-test-matrix') }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  # Test matrix with different categories and environments
  test-matrix:
    name: Test (${{ matrix.category }}, ${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: check-matrix
    if: needs.check-matrix.outputs.should_run == 'true'
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # Unit tests in different environments
          - category: "unit"
            environment: "ci"
            description: "Unit tests (CI environment)"
            needs_registry: false
            
          - category: "unit"
            environment: "local"
            description: "Unit tests (Local environment)"
            needs_registry: false
          
          # Timing-sensitive tests (only in local/integration)
          - category: "timing_sensitive"
            environment: "local" 
            description: "Timing-sensitive tests"
            needs_registry: true
            
          # Integration category tests
          - category: "integration"
            environment: "integration"
            description: "Integration tests"
            needs_registry: true
            
          # Package-specific testing
          - category: "unit"
            environment: "ci"
            description: "GCR Client Unit Tests"
            needs_registry: false
            package: "freightliner/pkg/client/gcr"
            
          - category: "unit"
            environment: "ci" 
            description: "ECR Client Unit Tests"
            needs_registry: false
            package: "freightliner/pkg/client/ecr"
            
          - category: "unit"
            environment: "ci"
            description: "Replication Unit Tests"
            needs_registry: true
            package: "freightliner/pkg/replication"
    
    services:
      registry:
        image: ${{ matrix.needs_registry && 'registry:2' || '' }}
        ports:
          - ${{ matrix.needs_registry && '5100:5000' || '' }}
        options: >-
          ${{ matrix.needs_registry && '--health-cmd "wget --quiet --tries=1 --spider http://localhost:5000/v2/ || exit 1" --health-interval 10s --health-timeout 5s --health-retries 3 --health-start-period 10s' || '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: true

      - name: Force Go module mode
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "GOFLAGS=-mod=mod" >> $GITHUB_ENV
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-matrix-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-matrix-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Show test configuration
        run: |
          echo "=== Test Matrix Configuration ==="
          echo "Category: ${{ matrix.category }}"
          echo "Environment: ${{ matrix.environment }}"
          echo "Description: ${{ matrix.description }}"
          echo "Package: ${{ matrix.package || 'All packages' }}"
          echo "Needs Registry: ${{ matrix.needs_registry }}"
          echo ""
          echo "=== Test Manifest Summary ==="
          make test-summary
        env:
          TEST_ENV: ${{ matrix.environment }}

      - name: Run tests
        run: |
          # Build the test command based on matrix parameters
          if [ -n "${{ matrix.package }}" ]; then
            echo "Running tests for specific package: ${{ matrix.package }}"
            ./scripts/test-with-manifest.sh \
              --env ${{ matrix.environment }} \
              --categories ${{ matrix.category }} \
              --verbose \
              ${{ matrix.package }}
          else
            echo "Running tests for category: ${{ matrix.category }}"
            ./scripts/test-with-manifest.sh \
              --env ${{ matrix.environment }} \
              --categories ${{ matrix.category }} \
              --verbose
          fi
        env:
          REGISTRY_HOST: ${{ matrix.needs_registry && 'localhost:5100' || '' }}
          TEST_ENV: ${{ matrix.environment }}
          CI: ${{ matrix.environment == 'ci' && 'true' || '' }}
          GITHUB_ACTIONS: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.category }}-${{ matrix.environment }}-${{ matrix.package && github.run_number || 'all' }}
          path: |
            test-output.log
            coverage-*.out
          retention-days: 7

  # Summary job that depends on all matrix jobs
  test-matrix-summary:
    name: Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [check-matrix, test-matrix]
    if: always() && needs.check-matrix.outputs.should_run == 'true'
    
    steps:
      - name: Checkout code (for manifest)
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Download dependencies
        run: go mod download

      - name: Generate test matrix summary
        run: |
          echo "# Test Matrix Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          make test-summary >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze results
          echo "## Matrix Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Environment | Package | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Note: In a real implementation, we'd parse the job results
          # For now, provide a template
          echo "| unit | ci | All | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| unit | local | All | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| timing_sensitive | local | All | ⚠️ |" >> $GITHUB_STEP_SUMMARY
          echo "| integration | integration | All | ✅ |" >> $GITHUB_STEP_SUMMARY
          
          # Check if any jobs failed
          if [[ "${{ contains(needs.test-matrix.result, 'failure') }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some matrix jobs failed. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All matrix jobs completed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall status
        run: |
          if [[ "${{ contains(needs.test-matrix.result, 'failure') }}" == "true" ]]; then
            echo "❌ Test matrix had failures"
            exit 1
          else
            echo "✅ Test matrix completed successfully"
          fi