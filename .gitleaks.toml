# GitLeaks Configuration for Freightliner Security Scanning
# This configuration defines rules for detecting secrets in the codebase

title = "Freightliner Security Scanning Configuration"

[extend]
# Extend the default gitleaks configuration
useDefault = true

[[rules]]
id = "aws-access-key-id"
description = "AWS Access Key ID"
regex = '''AKIA[0-9A-Z]{16}'''
keywords = [
    "AKIA",
]

[[rules]]
id = "aws-secret-access-key"
description = "AWS Secret Access Key"
regex = '''(?i)aws(.{0,20})?(?-i)['\"][0-9a-zA-Z\/+]{40}['\"]'''
keywords = [
    "aws_secret_access_key",
    "aws_secret_key",
    "secret_access_key",
]

[[rules]]
id = "google-api-key"
description = "Google API Key"
regex = '''AIza[0-9A-Za-z\-_]{35}'''
keywords = [
    "AIza",
]

[[rules]]
id = "google-service-account"
description = "Google Service Account JSON Key"
regex = '''"type":\s*"service_account"'''
keywords = [
    "service_account",
    "private_key",
    "client_email",
]

[[rules]]
id = "github-token"
description = "GitHub Token"
regex = '''gh[pousr]_[A-Za-z0-9_]{36,251}'''
keywords = [
    "github_token",
    "gh_token",
    "ghp_",
    "gho_",
    "ghu_",
    "ghs_",
    "ghr_",
]

[[rules]]
id = "docker-config"
description = "Docker Config with Authentication"
regex = '''"auths":\s*{[^}]*"auth":\s*"[A-Za-z0-9+/=]+"'''
keywords = [
    "docker",
    "auths",
    "auth",
]

[[rules]]
id = "private-key"
description = "Private Key"
regex = '''-----BEGIN (RSA|OPENSSH|DSA|EC|PGP) PRIVATE KEY-----'''
keywords = [
    "BEGIN RSA PRIVATE KEY",
    "BEGIN OPENSSH PRIVATE KEY",
    "BEGIN DSA PRIVATE KEY",
    "BEGIN EC PRIVATE KEY",
    "BEGIN PGP PRIVATE KEY",
]

[[rules]]
id = "certificate"
description = "Certificate"
regex = '''-----BEGIN CERTIFICATE-----'''
keywords = [
    "BEGIN CERTIFICATE",
]

[[rules]]
id = "jwt-token"
description = "JWT Token"
regex = '''eyJ[A-Za-z0-9_-]*\.eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*'''
keywords = [
    "jwt",
    "token",
    "bearer",
]

[[rules]]
id = "database-url"
description = "Database Connection String"
regex = '''(?i)(postgres|mysql|mongodb|redis)://[^/\s]+:[^@\s]+@[^/\s]+'''
keywords = [
    "postgres://",
    "mysql://",
    "mongodb://",
    "redis://",
    "database_url",
    "db_url",
]

[[rules]]
id = "slack-webhook"
description = "Slack Webhook URL"
regex = '''https://hooks\.slack\.com/services/[A-Z0-9]{9}/[A-Z0-9]{9}/[A-Za-z0-9]{24}'''
keywords = [
    "hooks.slack.com",
    "slack_webhook",
]

[[rules]]
id = "generic-secret"
description = "Generic Secret Pattern"
regex = '''(?i)(secret|password|passwd|key|token)['"]?\s*[:=]\s*['"][^'"\s]{8,}['"]'''
keywords = [
    "secret",
    "password",
    "passwd",
    "key",
    "token",
    "api_key",
    "auth_token",
]

# Custom rules for container registry credentials
[[rules]]
id = "ecr-auth-token"
description = "AWS ECR Authorization Token"
regex = '''(?i)(ecr|registry)[_-]?(auth[_-]?token|password)['"]?\s*[:=]\s*['"][A-Za-z0-9+/]{100,}['"]'''
keywords = [
    "ecr_auth_token",
    "registry_password",
    "ecr_password",
]

[[rules]]
id = "gcp-artifact-registry"
description = "GCP Artifact Registry Token"
regex = '''(?i)(artifact[_-]?registry|gar)[_-]?(token|key|auth)['"]?\s*[:=]\s*['"][A-Za-z0-9._-]{20,}['"]'''
keywords = [
    "artifact_registry",
    "gar_token",
    "registry_auth",
]

# Allowlist for false positives
[allowlist]
description = "Allowlist for false positives"
paths = [
    ".*_test\\.go",
    ".*/testdata/.*",
    ".*/test/.*",
    ".*/examples/.*",
    ".*\\.md",
    ".*\\.txt",
    ".*/docs/.*",
]

# Regular expressions for files to ignore
regexes = [
    # Test and example data
    '''(?i)test[_-]?(data|key|token|secret)''',
    '''(?i)example[_-]?(key|token|secret)''',
    '''(?i)dummy[_-]?(key|token|secret)''',
    '''(?i)placeholder[_-]?(key|token|secret)''',
    '''(?i)sample[_-]?(key|token|secret)''',
    
    # Template variables
    '''\{\{.*\}\}''',
    '''\$\{.*\}''',
    '''<.*>''',
    
    # Documentation placeholders
    '''your[_-]?(key|token|secret)''',
    '''insert[_-]?(key|token|secret)''',
    '''replace[_-]?(key|token|secret)''',
    
    # Common false positives
    '''(?i)base64[_-]?encode''',
    '''(?i)sha256[_-]?hash''',
    '''(?i)md5[_-]?hash''',
]

# Entropy-based detection configuration
[entropy]
# Enable entropy-based detection for high-entropy strings
enabled = true
# Minimum entropy threshold (bits)
threshold = 3.5
# Groups to check entropy for
groups = ["password", "key", "token", "secret"]