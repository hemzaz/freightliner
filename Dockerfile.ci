# Dockerfile for CI builds - ensures consistent Go module environment
FROM golang:1.24.5-alpine AS builder

# Install necessary tools
RUN apk add --no-cache git curl make bash

# Set working directory
WORKDIR /workspace

# Force module mode globally for all Go operations
ENV GO111MODULE=on
ENV GOFLAGS=-mod=mod
ENV GOPATH=

# Copy go module files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Verify module setup
RUN go mod verify && go list -m

# Install CI tools with pinned versions
RUN go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@v0.29.0 && \
    go install honnef.co/go/tools/cmd/staticcheck@2025.1.1 && \
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v2.3.0

# Build stage - verify all packages compile
FROM builder AS build
RUN go build ./...
RUN go build -o /tmp/freightliner main.go

# Test stage
FROM builder AS test
RUN go test -v ./...

# Lint stage  
FROM builder AS lint
RUN golangci-lint run --timeout=5m || echo "Linting found issues but build continues"

# Static analysis stage
FROM builder AS static
RUN make vet
RUN staticcheck ./... || echo "Static analysis found issues but build continues"

# Final verification stage
FROM builder AS verify
RUN go mod tidy
RUN git diff --exit-code go.mod go.sum