apiVersion: v1
kind: ConfigMap
metadata:
  name: freightliner-config
  namespace: freightliner
  labels:
    app.kubernetes.io/name: freightliner
    app.kubernetes.io/component: configuration
data:
  config.yaml: |
    # Freightliner Production Configuration
    logLevel: info
    
    # Worker configuration optimized for production
    workers:
      replicateWorkers: 0  # Auto-detect based on container resources
      serveWorkers: 0      # Auto-detect based on container resources
      autoDetect: true
    
    # Server configuration with production security
    server:
      port: 8080
      tlsEnabled: true
      tlsCertFile: /etc/ssl/certs/tls.crt
      tlsKeyFile: /etc/ssl/private/tls.key
      apiKeyAuth: true
      allowedOrigins:
        - "https://freightliner-ui.company.com"
        - "https://api.company.com"
      readTimeout: 30s
      writeTimeout: 60s
      shutdownTimeout: 15s
      healthCheckPath: /health
      metricsPath: /metrics
      replicatePath: /api/v1/replicate
      treeReplicatePath: /api/v1/replicate-tree
      statusPath: /api/v1/status
    
    # Encryption enabled by default in production
    encryption:
      enabled: true
      customerManagedKeys: true
      envelopeEncryption: true
      gcpKeyRing: freightliner-prod
      gcpKeyName: image-encryption
    
    # Secrets management configuration
    secrets:
      useSecretsManager: true
      secretsManagerType: "auto"  # Auto-detect based on cloud environment
      registryCredsSecret: freightliner-registry-credentials
      encryptionKeysSecret: freightliner-encryption-keys
    
    # Checkpoint configuration for high availability
    checkpoint:
      directory: /data/checkpoints
      id: ""
    
    # Tree replication optimized for production workloads
    treeReplicate:
      workers: 0  # Auto-detect
      excludeRepos:
        - "temp-*"
        - "test-*"
        - "dev-*"
      excludeTags:
        - "dev-*"
        - "test-*"
        - "temp-*"
      includeTags:
        - "v*"
        - "latest"
        - "stable"
        - "release-*"
      dryRun: false
      force: false
      enableCheckpoint: true
      checkpointDir: /data/checkpoints
      resumeID: ""
      skipCompleted: true
      retryFailed: true
    
    # Single repository replication defaults
    replicate:
      force: false
      dryRun: false
      tags:
        - "latest"
  
  prometheus.yaml: |
    # Prometheus scraping configuration
    scrape_configs:
      - job_name: 'freightliner'
        static_configs:
          - targets: ['freightliner-service:8080']
        metrics_path: /metrics
        scrape_interval: 30s
        scrape_timeout: 10s
  
  logging.yaml: |
    # Structured logging configuration
    level: info
    format: json
    output: stdout
    fields:
      service: freightliner
      version: "1.0.0"
      environment: production
    
    # Log sampling to reduce volume
    sampling:
      initial: 100
      thereafter: 100
    
    # Log levels for different components
    loggers:
      github.com/aws/aws-sdk-go: warn
      cloud.google.com/go: warn
      github.com/docker/docker: warn
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: freightliner-scripts
  namespace: freightliner
  labels:
    app.kubernetes.io/name: freightliner
    app.kubernetes.io/component: scripts
data:
  entrypoint.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Production entrypoint script with health checks and graceful shutdown
    
    echo "Starting Freightliner Container Registry Replication Service..."
    echo "Version: ${FREIGHTLINER_VERSION:-1.0.0}"
    echo "Environment: ${ENVIRONMENT:-production}"
    echo "Namespace: ${POD_NAMESPACE:-freightliner}"
    
    # Validate required environment variables
    required_vars=("FREIGHTLINER_CONFIG_PATH")
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            echo "ERROR: Required environment variable $var is not set"
            exit 1
        fi
    done
    
    # Wait for secrets to be mounted
    echo "Waiting for secrets to be available..."
    timeout=60
    while [[ $timeout -gt 0 ]] && [[ ! -f /etc/secrets/api-key ]]; do
        echo "Waiting for API key secret... ($timeout seconds remaining)"
        sleep 2
        timeout=$((timeout - 2))
    done
    
    if [[ ! -f /etc/secrets/api-key ]]; then
        echo "ERROR: API key secret not found after 60 seconds"
        exit 1
    fi
    
    # Set up signal handlers for graceful shutdown
    trap 'echo "Received SIGTERM, shutting down gracefully..."; kill -TERM $PID; wait $PID' TERM
    trap 'echo "Received SIGINT, shutting down gracefully..."; kill -INT $PID; wait $PID' INT
    
    # Start the application
    echo "Starting Freightliner service..."
    /usr/local/bin/freightliner serve --config="${FREIGHTLINER_CONFIG_PATH}" &
    PID=$!
    
    # Wait for the process to exit
    wait $PID
    echo "Freightliner service stopped"
  
  health-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Health check script for Kubernetes probes
    
    HEALTH_ENDPOINT="${HEALTH_ENDPOINT:-http://localhost:8080/health}"
    TIMEOUT="${HEALTH_CHECK_TIMEOUT:-10}"
    
    # Perform health check
    if curl -sf --max-time "$TIMEOUT" "$HEALTH_ENDPOINT" > /dev/null 2>&1; then
        echo "Health check passed"
        exit 0
    else
        echo "Health check failed"
        exit 1
    fi
  
  readiness-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Readiness check script for Kubernetes probes
    
    STATUS_ENDPOINT="${STATUS_ENDPOINT:-http://localhost:8080/api/v1/status}"
    TIMEOUT="${READINESS_CHECK_TIMEOUT:-5}"
    
    # Check if service is ready to accept traffic
    response=$(curl -sf --max-time "$TIMEOUT" "$STATUS_ENDPOINT" 2>/dev/null || echo "failed")
    
    if [[ "$response" != "failed" ]]; then
        # Parse JSON response to check if service is ready
        if echo "$response" | grep -q '"status":"ready"'; then
            echo "Readiness check passed"
            exit 0
        fi
    fi
    
    echo "Readiness check failed"
    exit 1